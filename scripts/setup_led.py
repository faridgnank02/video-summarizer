#!/usr/bin/env python3
"""
Script pour t√©l√©charger, configurer et tester le mod√®le LED
Optimise les performances et corrige les probl√®mes de g√©n√©ration
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

def download_and_setup_led():
    """T√©l√©charge et configure le mod√®le LED"""
    print("üéØ Configuration du mod√®le LED")
    print("=" * 40)
    
    try:
        from models.led_model import LEDSummarizer
        import torch
        
        print(f"üìä PyTorch version: {torch.__version__}")
        print(f"üíª CUDA disponible: {torch.cuda.is_available()}")
        print(f"üñ•Ô∏è  Device recommand√©: {'CUDA' if torch.cuda.is_available() else 'CPU'}")
        
        print("\nüì• T√©l√©chargement/Chargement du mod√®le LED...")
        print("‚è≥ Cela peut prendre quelques minutes la premi√®re fois...")
        
        # Initialiser le mod√®le (t√©l√©chargement automatique si n√©cessaire)
        led = LEDSummarizer()
        
        print("‚úÖ Mod√®le LED charg√© avec succ√®s !")
        return led
        
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement: {e}")
        return None

def test_led_with_different_texts(led):
    """Teste le mod√®le LED avec diff√©rents types de textes"""
    print("\nüß™ Tests du mod√®le LED")
    print("=" * 40)
    
    test_cases = [
        {
            "name": "Texte court (fran√ßais)",
            "text": """
            L'intelligence artificielle repr√©sente l'une des r√©volutions technologiques 
            les plus importantes de notre √©poque. Cette technologie permet aux machines 
            d'apprendre, de comprendre et de prendre des d√©cisions de mani√®re autonome. 
            Les applications sont multiples : reconnaissance vocale, traduction automatique, 
            v√©hicules autonomes, diagnostic m√©dical assist√©. Cependant, cette √©volution 
            soul√®ve des questions √©thiques fondamentales sur l'avenir du travail humain 
            et la protection de la vie priv√©e.
            """,
            "type": "short"
        },
        {
            "name": "Texte technique (fran√ßais)",
            "text": """
            Le machine learning, ou apprentissage automatique, constitue une branche 
            centrale de l'intelligence artificielle. Cette approche permet aux syst√®mes 
            informatiques d'am√©liorer automatiquement leurs performances sur une t√¢che 
            sp√©cifique gr√¢ce √† l'exp√©rience, sans √™tre explicitement programm√©s pour 
            chaque situation. Les algorithmes d'apprentissage automatique construisent 
            un mod√®le math√©matique bas√© sur des donn√©es d'entra√Ænement pour faire des 
            pr√©dictions ou prendre des d√©cisions sans intervention humaine directe. 
            Cette technologie trouve des applications dans de nombreux domaines : 
            filtrage de courrier √©lectronique, reconnaissance optique de caract√®res, 
            moteurs de recherche, vision par ordinateur et bio-informatique.
            """,
            "type": "long"
        }
    ]
    
    results = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù Test {i}: {test_case['name']}")
        print("-" * 30)
        
        text = test_case['text'].strip()
        summary_type = test_case['type']
        
        print(f"üìä Texte original: {len(text.split())} mots")
        print(f"üéØ Type de r√©sum√©: {summary_type}")
        
        try:
            summary = led.summarize(text, summary_type=summary_type)
            
            # Nettoyer le r√©sum√© des artefacts
            summary_clean = clean_summary(summary)
            
            print(f"‚úÖ R√©sum√© g√©n√©r√©: {len(summary_clean.split())} mots")
            print(f"üìÑ R√©sum√©: {summary_clean}")
            
            results.append({
                "test": test_case['name'],
                "original_length": len(text.split()),
                "summary_length": len(summary_clean.split()),
                "success": True,
                "summary": summary_clean
            })
            
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            results.append({
                "test": test_case['name'],
                "success": False,
                "error": str(e)
            })
    
    return results

def clean_summary(summary):
    """Nettoie le r√©sum√© des artefacts de g√©n√©ration"""
    import re
    
    # Supprimer les caract√®res √©tranges et doublons
    summary = re.sub(r'[^\w\s\-.,;:!?\'"√†√¢√§√©√®√™√´√Ø√Æ√¥√∂√π√ª√º√ø√ß√±]', '', summary)
    
    # Corriger les espaces multiples
    summary = re.sub(r'\s+', ' ', summary)
    
    # Supprimer les r√©p√©titions de mots
    words = summary.split()
    cleaned_words = []
    prev_word = ""
    
    for word in words:
        if word.lower() != prev_word.lower():
            cleaned_words.append(word)
            prev_word = word
    
    return ' '.join(cleaned_words).strip()

def optimize_led_config():
    """Optimise la configuration du mod√®le LED"""
    print("\n‚öôÔ∏è Optimisation de la configuration LED")
    print("=" * 40)
    
    config_path = Path(__file__).parent.parent / "config" / "model_config.yaml"
    
    try:
        import yaml
        
        # Lire la configuration actuelle
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # Optimiser les param√®tres LED
        if 'models' not in config:
            config['models'] = {}
        
        if 'led' not in config['models']:
            config['models']['led'] = {}
        
        # Param√®tres optimis√©s
        optimized_config = {
            'model_name': 'allenai/led-base-16384',
            'max_input_length': 4096,  # R√©duit pour de meilleures performances
            'max_output_length': 512,
            'generation_config': {
                'num_beams': 3,           # √âquilibre qualit√©/vitesse
                'max_length': 512,
                'min_length': 50,
                'length_penalty': 1.5,    # Moins p√©nalisant
                'early_stopping': True,
                'no_repeat_ngram_size': 2, # R√©duit les r√©p√©titions
                'repetition_penalty': 1.1, # Nouveau param√®tre
                'do_sample': False,        # G√©n√©ration d√©terministe
                'temperature': 1.0
            }
        }
        
        config['models']['led'].update(optimized_config)
        
        # Sauvegarder la configuration optimis√©e
        with open(config_path, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, indent=2, allow_unicode=True)
        
        print("‚úÖ Configuration LED optimis√©e")
        print("üìù Param√®tres mis √† jour:")
        for key, value in optimized_config['generation_config'].items():
            print(f"   ‚Ä¢ {key}: {value}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'optimisation: {e}")
        return False

def create_led_usage_examples():
    """Cr√©e des exemples d'utilisation du mod√®le LED"""
    examples_path = Path(__file__).parent.parent / "assets" / "examples"
    examples_path.mkdir(exist_ok=True)
    
    example_file = examples_path / "led_examples.py"
    
    example_code = '''#!/usr/bin/env python3
"""
Exemples d'utilisation du mod√®le LED pour le r√©sum√© de texte
"""

import sys
from pathlib import Path

# Ajouter src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from models.led_model import LEDSummarizer

def example_simple_summary():
    """Exemple de r√©sum√© simple"""
    print("üìù Exemple: R√©sum√© simple")
    
    led = LEDSummarizer()
    
    text = """
    L'intelligence artificielle (IA) transforme rapidement notre monde moderne.
    Cette technologie permet aux ordinateurs de r√©aliser des t√¢ches qui n√©cessitaient
    auparavant l'intelligence humaine. Les applications incluent la reconnaissance
    vocale, la traduction automatique, la conduite autonome et l'analyse de donn√©es.
    Cependant, l'IA soul√®ve des questions importantes sur l'emploi, l'√©thique et
    la protection de la vie priv√©e que nous devons aborder de mani√®re responsable.
    """
    
    summary = led.summarize(text, summary_type="short")
    print(f"R√©sum√©: {summary}")

def example_long_document():
    """Exemple avec un document plus long"""
    print("\\nüìñ Exemple: Document long")
    
    led = LEDSummarizer()
    
    # Simuler un document plus long
    long_text = """
    L'intelligence artificielle repr√©sente l'une des avanc√©es technologiques les plus
    significatives de notre √©poque. Cette discipline, qui combine informatique,
    math√©matiques et sciences cognitives, vise √† cr√©er des syst√®mes capables de
    r√©aliser des t√¢ches n√©cessitant normalement l'intelligence humaine.
    
    Les applications de l'IA sont d√©sormais omnipr√©sentes dans notre quotidien.
    Les assistants vocaux comme Siri, Alexa ou Google Assistant utilisent des
    algorithmes de reconnaissance vocale et de traitement du langage naturel.
    Les plateformes de streaming comme Netflix ou Spotify emploient des syst√®mes
    de recommandation bas√©s sur l'apprentissage automatique.
    
    Dans le domaine m√©dical, l'IA aide au diagnostic pr√©coce de maladies,
    √† l'analyse d'images m√©dicales et au d√©veloppement de nouveaux m√©dicaments.
    L'industrie automobile d√©veloppe des v√©hicules autonomes gr√¢ce √† la vision
    par ordinateur et aux r√©seaux de neurones profonds.
    
    Cependant, cette r√©volution technologique soul√®ve des d√©fis importants.
    L'impact sur l'emploi inqui√®te de nombreux secteurs, car l'automatisation
    pourrait remplacer certains m√©tiers. Les questions de protection des donn√©es
    personnelles et de vie priv√©e deviennent cruciales avec la collecte massive
    d'informations par les algorithmes d'IA.
    
    L'avenir de l'intelligence artificielle d√©pend de notre capacit√© √† d√©velopper
    cette technologie de mani√®re √©thique et responsable, en tenant compte des
    implications sociales, √©conomiques et philosophiques qu'elle repr√©sente.
    """
    
    summary = led.summarize(long_text, summary_type="long")
    print(f"R√©sum√© long: {summary}")

if __name__ == "__main__":
    example_simple_summary()
    example_long_document()
'''
    
    with open(example_file, 'w', encoding='utf-8') as f:
        f.write(example_code)
    
    print(f"‚úÖ Exemples cr√©√©s: {example_file}")

def main():
    """Fonction principale de configuration LED"""
    print("üéØ Configuration compl√®te du mod√®le LED")
    print("=" * 50)
    
    # 1. T√©l√©charger et configurer LED
    led = download_and_setup_led()
    if not led:
        print("‚ùå √âchec de la configuration LED")
        return False
    
    # 2. Optimiser la configuration
    optimize_led_config()
    
    # 3. Tester avec diff√©rents textes
    results = test_led_with_different_texts(led)
    
    # 4. Cr√©er des exemples
    create_led_usage_examples()
    
    # 5. R√©sum√© final
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DE LA CONFIGURATION LED")
    print("=" * 50)
    
    successful_tests = sum(1 for r in results if r['success'])
    total_tests = len(results)
    
    print(f"‚úÖ Tests r√©ussis: {successful_tests}/{total_tests}")
    
    if successful_tests == total_tests:
        print("üéâ Mod√®le LED enti√®rement fonctionnel !")
        print("\nüí° Utilisation:")
        print("   ‚Ä¢ Interface web: streamlit run src/ui/streamlit_app.py")
        print("   ‚Ä¢ Code: from models.led_model import LEDSummarizer")
        print("   ‚Ä¢ Exemples: python assets/examples/led_examples.py")
    else:
        print("‚ö†Ô∏è  Quelques tests ont √©chou√©, mais le mod√®le de base fonctionne")
    
    print(f"\nüîß Configuration optimis√©e sauvegard√©e")
    print(f"üìö Exemples d'utilisation cr√©√©s")
    
    return True

if __name__ == "__main__":
    main()
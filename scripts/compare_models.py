#!/usr/bin/env python3
"""
Test comparatif entre les mod√®les LED et OpenAI
"""

import sys
from pathlib import Path

# Ajouter src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

def compare_models():
    """Compare les r√©sultats des mod√®les LED et OpenAI"""
    print("üîç Comparaison des mod√®les LED vs OpenAI")
    print("=" * 50)
    
    from models.model_manager import ModelManager
    
    # Texte de test
    test_text = """
    L'intelligence artificielle (IA) transforme rapidement tous les secteurs de notre √©conomie moderne. 
    Cette technologie r√©volutionnaire permet aux machines d'apprendre, de comprendre le langage naturel, 
    de reconna√Ætre les images, et de prendre des d√©cisions complexes sans intervention humaine directe.
    
    Dans le domaine de la sant√©, l'IA aide au diagnostic m√©dical en analysant des scanners, des radiographies 
    et des donn√©es de patients pour d√©tecter des maladies plus rapidement et avec plus de pr√©cision que 
    les m√©thodes traditionnelles. Les algorithmes d'apprentissage automatique peuvent identifier des 
    sch√©mas subtils dans les donn√©es m√©dicales que l'≈ìil humain pourrait manquer.
    
    L'industrie automobile d√©veloppe des v√©hicules autonomes gr√¢ce √† des syst√®mes de vision par ordinateur 
    et des r√©seaux de neurones profonds. Ces voitures intelligentes peuvent naviguer dans le trafic, 
    √©viter les obstacles, et prendre des d√©cisions de conduite en temps r√©el.
    
    Cependant, cette r√©volution technologique soul√®ve des questions importantes sur l'avenir de l'emploi, 
    la protection de la vie priv√©e, et l'√©thique des d√©cisions automatis√©es. Il est crucial de d√©velopper 
    l'IA de mani√®re responsable pour maximiser ses b√©n√©fices tout en minimisant les risques.
    """
    
    manager = ModelManager()
    
    print(f"üìä Texte original: {len(test_text.split())} mots")
    print(f"üìù Extrait: {test_text[:100]}...")
    
    # Test OpenAI
    print("\n‚ö° Test avec OpenAI GPT:")
    print("-" * 30)
    try:
        openai_summary = manager.summarize_simple(
            test_text, 
            model_type="openai", 
            summary_length="short"
        )
        print(f"‚úÖ R√©sum√© OpenAI ({len(openai_summary.split())} mots):")
        print(f"   {openai_summary}")
    except Exception as e:
        print(f"‚ùå Erreur OpenAI: {e}")
        openai_summary = None
    
    # Test LED
    print("\nüéØ Test avec LED:")
    print("-" * 30)
    try:
        led_summary = manager.summarize_simple(
            test_text, 
            model_type="led", 
            summary_length="short"
        )
        print(f"‚úÖ R√©sum√© LED ({len(led_summary.split())} mots):")
        print(f"   {led_summary}")
    except Exception as e:
        print(f"‚ùå Erreur LED: {e}")
        led_summary = None
    
    # Comparaison
    print("\nüìã Comparaison:")
    print("-" * 30)
    
    if openai_summary and led_summary:
        print(f"‚Ä¢ Longueur OpenAI: {len(openai_summary.split())} mots")
        print(f"‚Ä¢ Longueur LED: {len(led_summary.split())} mots")
        
        # Qualit√© subjective (crit√®res simples)
        openai_coherent = not any(artifact in openai_summary for artifact in ['√©t', '√Ç', '  '])
        led_coherent = not any(artifact in led_summary for artifact in ['√©t', '√Ç', '  '])
        
        print(f"‚Ä¢ Coh√©rence OpenAI: {'‚úÖ' if openai_coherent else '‚ö†Ô∏è'}")
        print(f"‚Ä¢ Coh√©rence LED: {'‚úÖ' if led_coherent else '‚ö†Ô∏è'}")
        
    elif openai_summary:
        print("‚Ä¢ Seul OpenAI disponible")
    elif led_summary:
        print("‚Ä¢ Seul LED disponible")
    else:
        print("‚Ä¢ Aucun mod√®le disponible")

def test_led_performance():
    """Test sp√©cifique des performances LED"""
    print("\nüéØ Test de performance LED")
    print("=" * 50)
    
    import time
    from models.led_model import LEDSummarizer
    
    led = LEDSummarizer()
    
    # Test avec diff√©rentes longueurs
    texts = [
        ("Court", "L'IA transforme notre monde avec des applications vari√©es."),
        ("Moyen", """
        L'intelligence artificielle r√©volutionne de nombreux domaines.
        Elle permet l'automatisation de t√¢ches complexes et l'analyse
        de grandes quantit√©s de donn√©es. Les applications incluent
        la reconnaissance vocale, la vision par ordinateur, et la
        traduction automatique.
        """),
        ("Long", """
        L'intelligence artificielle repr√©sente l'une des avanc√©es technologiques
        les plus significatives de notre √©poque. Cette discipline interdisciplinaire
        combine informatique, math√©matiques, sciences cognitives et neurosciences
        pour cr√©er des syst√®mes capables de r√©aliser des t√¢ches qui n√©cessitent
        normalement l'intelligence humaine.
        
        Les applications de l'IA sont d√©sormais omnipr√©sentes dans notre quotidien.
        Les moteurs de recherche utilisent des algorithmes sophistiqu√©s pour classer
        les r√©sultats. Les plateformes de m√©dias sociaux emploient l'IA pour
        personnaliser les contenus et d√©tecter les contenus inappropri√©s.
        
        Dans le domaine m√©dical, l'IA assiste les professionnels de sant√© dans
        le diagnostic, la d√©couverte de m√©dicaments et la planification de traitements.
        L'industrie financi√®re utilise l'IA pour la d√©tection de fraude, l'√©valuation
        des risques et le trading algorithmique.
        """)
    ]
    
    for name, text in texts:
        print(f"\nüìù Test {name} ({len(text.split())} mots):")
        
        start_time = time.time()
        try:
            summary = led.summarize(text, summary_type="short")
            end_time = time.time()
            
            duration = end_time - start_time
            summary_clean = summary.replace('\n', ' ').strip()
            
            print(f"   ‚è±Ô∏è  Temps: {duration:.2f}s")
            print(f"   üìä R√©sum√©: {len(summary_clean.split())} mots")
            print(f"   üìÑ Extrait: {summary_clean[:80]}...")
            
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")

def main():
    """Fonction principale"""
    compare_models()
    test_led_performance()
    
    print("\n" + "=" * 50)
    print("üéâ Tests de comparaison termin√©s !")
    print("\nüí° Conclusions:")
    print("‚Ä¢ OpenAI: Plus rapide, plus coh√©rent, n√©cessite une cl√© API")
    print("‚Ä¢ LED: Gratuit, fonctionne hors ligne, mais plus lent et moins coh√©rent sur des textes courts")
    print("‚Ä¢ Recommandation: OpenAI pour usage quotidien, LED pour tests ou usage sans Internet")

if __name__ == "__main__":
    main()
"""
Interface Streamlit pour le Video Summarizer
Application web moderne pour le r√©sum√© de vid√©os
"""

import streamlit as st
import os
import sys
import logging
import time
from pathlib import Path
from typing import Optional, Dict, Any

# Ajouter le r√©pertoire src au PYTHONPATH
sys.path.append(str(Path(__file__).parent.parent))

try:
    from data.ingestion import DataIngestion, VideoData
    from data.preprocessing import TextPreprocessor
    from models.model_manager import ModelManager, ModelType, SummaryLength
except ImportError as e:
    st.error(f"Erreur d'importation des modules: {e}")
    st.stop()

# Configuration de la page
st.set_page_config(
    page_title="üé• R√©sumeur de Vid√©os IA",
    page_icon="üé•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class VideoSummarizerApp:
    """Application Streamlit pour le r√©sum√© de vid√©os"""
    
    def __init__(self):
        self.ingestion = DataIngestion()
        self.preprocessor = TextPreprocessor()
        self.model_manager = None
        
        # √âtat de l'application
        if 'summary_history' not in st.session_state:
            st.session_state.summary_history = []
        
        if 'current_video_data' not in st.session_state:
            st.session_state.current_video_data = None
    
    def initialize_models(self):
        """Initialise le gestionnaire de mod√®les (lazy loading)"""
        if self.model_manager is None:
            with st.spinner("üîÑ Initialisation des mod√®les..."):
                try:
                    config_path = Path(__file__).parent.parent.parent / "config" / "model_config.yaml"
                    self.model_manager = ModelManager(str(config_path) if config_path.exists() else None)
                    st.success("‚úÖ Mod√®les initialis√©s avec succ√®s!")
                except Exception as e:
                    st.error(f"‚ùå Erreur lors de l'initialisation des mod√®les: {e}")
                    return False
        return True
    
    def render_header(self):
        """Affiche l'en-t√™te de l'application"""
        st.title("üé• R√©sumeur de Vid√©os IA")
        st.markdown("""
        **Transformez vos vid√©os en r√©sum√©s intelligents** avec deux mod√®les au choix :
        - üéØ **LED Fine-tun√©** : Qualit√© maximale pour r√©sum√©s d√©taill√©s
        - ‚ö° **OpenAI GPT** : Vitesse optimale pour r√©sum√©s rapides
        """)
        st.divider()
    
    def render_sidebar(self):
        """Affiche la barre lat√©rale avec les param√®tres"""
        st.sidebar.header("‚öôÔ∏è Param√®tres")
        
        # S√©lection du mod√®le
        model_option = st.sidebar.selectbox(
            "ü§ñ Mod√®le de r√©sum√©",
            ["Auto (Recommand√©)", "LED (Qualit√©)", "OpenAI (Rapidit√©)"],
            help="Auto choisit automatiquement le meilleur mod√®le selon le contexte"
        )
        
        # S√©lection de la longueur
        length_option = st.sidebar.selectbox(
            "üìè Longueur du r√©sum√©",
            ["Long (200-500 mots)", "Court (50-200 mots)"],
            help="Longueur approximative du r√©sum√© g√©n√©r√©"
        )
        
        # Langue
        language_option = st.sidebar.selectbox(
            "üåç Langue",
            ["Auto-d√©tection", "Fran√ßais", "Anglais"],
            help="Langue du r√©sum√© g√©n√©r√©"
        )
        
        # Informations sur les mod√®les
        with st.sidebar.expander("‚ÑπÔ∏è Informations sur les mod√®les"):
            st.markdown("""
            **LED Fine-tun√©:**
            - ‚úÖ Qualit√© √©lev√©e
            - ‚úÖ Textes longs
            - ‚è±Ô∏è Plus lent (~5-10s)
            
            **OpenAI GPT:**
            - ‚úÖ Tr√®s rapide (~2-3s)
            - ‚úÖ Multi-langues
            - üí∞ Co√ªt par utilisation
            """)
        
        return {
            'model': model_option,
            'length': length_option,
            'language': language_option
        }
    
    def render_video_input(self):
        """Affiche les options d'entr√©e vid√©o"""
        st.header("üìπ Source Vid√©o")
        
        # Tabs pour diff√©rentes sources
        tab1, tab2, tab3 = st.tabs(["üîó YouTube", "üìÅ Fichier Local", "üìù Texte Direct"])
        
        video_data = None
        
        with tab1:
            st.subheader("URL YouTube")
            youtube_url = st.text_input(
                "Entrez l'URL de la vid√©o YouTube :",
                placeholder="https://www.youtube.com/watch?v=...",
                help="Collez l'URL compl√®te de la vid√©o YouTube"
            )
            
            if st.button("üì• Extraire le transcript", key="youtube"):
                if youtube_url:
                    try:
                        with st.spinner("üîÑ Extraction du transcript..."):
                            video_data = self.ingestion.process_youtube_url(youtube_url)
                            st.success(f"‚úÖ Transcript extrait : {video_data.title}")
                    except Exception as e:
                        st.error(f"‚ùå Erreur : {e}")
                else:
                    st.warning("‚ö†Ô∏è Veuillez entrer une URL YouTube")
        
        with tab2:
            st.subheader("Fichier Vid√©o Local")
            uploaded_file = st.file_uploader(
                "Choisissez un fichier vid√©o",
                type=['mp4', 'avi', 'mov', 'mkv', 'webm'],
                help="Formats support√©s : MP4, AVI, MOV, MKV, WebM"
            )
            
            if uploaded_file and st.button("üéôÔ∏è Transcrire l'audio", key="local"):
                st.warning("üöß Fonctionnalit√© en d√©veloppement (n√©cessite Whisper)")
                # TODO: Impl√©menter la transcription locale avec Whisper
        
        with tab3:
            st.subheader("Texte Direct")
            direct_text = st.text_area(
                "Collez votre texte ici :",
                height=200,
                placeholder="Collez le transcript ou le texte que vous souhaitez r√©sumer...",
                help="Texte brut √† r√©sumer directement"
            )
            
            custom_title = st.text_input(
                "Titre (optionnel) :",
                placeholder="Titre de votre texte"
            )
            
            if st.button("üìù Utiliser ce texte", key="direct"):
                if direct_text.strip():
                    video_data = self.ingestion.process_text_input(
                        direct_text, 
                        custom_title or "Texte personnalis√©"
                    )
                    st.success("‚úÖ Texte pr√™t pour le r√©sum√©")
                else:
                    st.warning("‚ö†Ô∏è Veuillez entrer du texte")
        
        return video_data
    
    def render_video_info(self, video_data: VideoData):
        """Affiche les informations sur la vid√©o"""
        st.header("üìä Informations sur le contenu")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üìù Titre", value="", delta=video_data.title)
        
        with col2:
            word_count = len(video_data.transcript.split())
            st.metric("üìä Mots", word_count)
        
        with col3:
            st.metric("üåç Langue", video_data.language.upper())
        
        with col4:
            if video_data.duration:
                duration_min = video_data.duration // 60
                st.metric("‚è±Ô∏è Dur√©e", f"{duration_min}min")
            else:
                st.metric("üìÑ Source", video_data.source)
        
        # Pr√©visualisation du transcript
        with st.expander("üëÅÔ∏è Pr√©visualiser le transcript"):
            preview_length = min(500, len(video_data.transcript))
            st.text_area(
                "Transcript (premiers 500 caract√®res) :",
                video_data.transcript[:preview_length] + ("..." if len(video_data.transcript) > preview_length else ""),
                height=150,
                disabled=True
            )
    
    def render_summary_generation(self, video_data: VideoData, params: Dict[str, str]):
        """Affiche la section de g√©n√©ration de r√©sum√©"""
        st.header("üéØ G√©n√©ration du R√©sum√©")
        
        if not self.initialize_models():
            return
        
        # Configuration des param√®tres
        model_type = "auto"
        if "LED" in params['model']:
            model_type = "led"
        elif "OpenAI" in params['model']:
            model_type = "openai"
        
        summary_length = "short" if "Court" in params['length'] else "long"
        
        language = None
        if params['language'] != "Auto-d√©tection":
            language = "french" if params['language'] == "Fran√ßais" else "english"
        
        # Bouton de g√©n√©ration
        if st.button("üöÄ G√©n√©rer le R√©sum√©", type="primary", use_container_width=True):
            try:
                start_time = time.time()
                
                with st.spinner("üîÑ G√©n√©ration en cours..."):
                    # Pr√©processing
                    processed_data = self.preprocessor.preprocess(video_data.transcript)
                    
                    # G√©n√©ration du r√©sum√©
                    summary = self.model_manager.summarize_simple(
                        text=processed_data.text,
                        model_type=model_type,
                        summary_length=summary_length,
                        language=language
                    )
                
                processing_time = time.time() - start_time
                
                # Affichage du r√©sum√©
                st.success(f"‚úÖ R√©sum√© g√©n√©r√© en {processing_time:.1f}s")
                
                # M√©triques du r√©sum√©
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üìä Mots", len(summary.split()))
                with col2:
                    compression_ratio = len(summary.split()) / len(video_data.transcript.split()) * 100
                    st.metric("üìâ Compression", f"{compression_ratio:.1f}%")
                with col3:
                    st.metric("‚è±Ô∏è Temps", f"{processing_time:.1f}s")
                
                # R√©sum√©
                st.subheader("üìã R√©sum√©")
                st.markdown(f"**{video_data.title}**")
                st.write(summary)
                
                # Sauvegarder dans l'historique
                summary_data = {
                    'title': video_data.title,
                    'summary': summary,
                    'model_type': model_type,
                    'length': summary_length,
                    'processing_time': processing_time,
                    'timestamp': time.strftime("%Y-%m-%d %H:%M:%S")
                }
                st.session_state.summary_history.append(summary_data)
                
                # Options d'export
                self.render_export_options(summary_data)
                
            except Exception as e:
                st.error(f"‚ùå Erreur lors de la g√©n√©ration : {e}")
                logger.error(f"Erreur r√©sum√©: {e}")
    
    def render_export_options(self, summary_data: Dict[str, Any]):
        """Affiche les options d'export"""
        st.subheader("üíæ Export")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Export TXT
            txt_content = f"""Titre: {summary_data['title']}
Date: {summary_data['timestamp']}
Mod√®le: {summary_data['model_type']}
Longueur: {summary_data['length']}

R√©sum√©:
{summary_data['summary']}"""
            
            st.download_button(
                "üìÑ T√©l√©charger TXT",
                txt_content,
                file_name=f"resume_{summary_data['timestamp'].replace(':', '-')}.txt",
                mime="text/plain"
            )
        
        with col2:
            # Export JSON
            import json
            json_content = json.dumps(summary_data, indent=2, ensure_ascii=False)
            
            st.download_button(
                "üìä T√©l√©charger JSON",
                json_content,
                file_name=f"resume_{summary_data['timestamp'].replace(':', '-')}.json",
                mime="application/json"
            )
        
        with col3:
            # Copier dans le presse-papier (avec JavaScript)
            if st.button("üìã Copier"):
                st.write("S√©lectionnez le texte ci-dessus et copiez-le (Ctrl+C)")
    
    def render_history(self):
        """Affiche l'historique des r√©sum√©s"""
        if st.session_state.summary_history:
            st.header("üìö Historique des R√©sum√©s")
            
            for i, item in enumerate(reversed(st.session_state.summary_history)):
                with st.expander(f"üìÑ {item['title']} - {item['timestamp']}"):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.write(item['summary'])
                    
                    with col2:
                        st.metric("Mod√®le", item['model_type'])
                        st.metric("Longueur", item['length'])
                        st.metric("Temps", f"{item['processing_time']:.1f}s")
            
            # Bouton pour vider l'historique
            if st.button("üóëÔ∏è Vider l'historique"):
                st.session_state.summary_history = []
                st.rerun()
    
    def render_stats(self):
        """Affiche les statistiques globales"""
        if self.model_manager:
            st.header("üìà Statistiques")
            
            try:
                stats = self.model_manager.get_stats()
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("üìä Total Requ√™tes", stats.get('total_requests', 0))
                
                with col2:
                    st.metric("üéØ LED", stats.get('led_requests', 0))
                
                with col3:
                    st.metric("‚ö° OpenAI", stats.get('openai_requests', 0))
                
                with col4:
                    avg_time = stats.get('average_processing_time', 0)
                    st.metric("‚è±Ô∏è Temps Moyen", f"{avg_time:.1f}s")
                
                # Graphique simple des requ√™tes
                if stats.get('total_requests', 0) > 0:
                    import matplotlib.pyplot as plt
                    
                    fig, ax = plt.subplots(figsize=(8, 4))
                    models = ['LED', 'OpenAI']
                    requests = [stats.get('led_requests', 0), stats.get('openai_requests', 0)]
                    
                    ax.bar(models, requests, color=['#1f77b4', '#ff7f0e'])
                    ax.set_ylabel('Nombre de requ√™tes')
                    ax.set_title('Utilisation des mod√®les')
                    
                    st.pyplot(fig)
                    
            except Exception as e:
                st.error(f"Erreur lors du chargement des statistiques: {e}")
    
    def run(self):
        """Lance l'application Streamlit"""
        self.render_header()
        
        # Barre lat√©rale
        params = self.render_sidebar()
        
        # Contenu principal
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Entr√©e vid√©o
            video_data = self.render_video_input()
            
            # Si on a des donn√©es vid√©o
            if video_data:
                st.session_state.current_video_data = video_data
            
            # Afficher les infos et g√©n√©rer le r√©sum√©
            if st.session_state.current_video_data:
                self.render_video_info(st.session_state.current_video_data)
                self.render_summary_generation(st.session_state.current_video_data, params)
        
        with col2:
            # Historique et statistiques
            self.render_history()
            
            # Statistiques (si des mod√®les sont charg√©s)
            if self.model_manager:
                self.render_stats()


def main():
    """Point d'entr√©e principal"""
    try:
        app = VideoSummarizerApp()
        app.run()
    except Exception as e:
        st.error(f"Erreur critique : {e}")
        logger.error(f"Erreur critique: {e}")


if __name__ == "__main__":
    main()